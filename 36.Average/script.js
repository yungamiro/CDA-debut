function sortedStudents(arr) {
  // Affiche la moyenne des notes du premier √©tudiant dans le tableau
  // console.log(
  //   arr[0].grades.reduce((acc, cur) => acc + cur) / arr[0].grades.length
  // );

  // Tri du tableau d'objets en fonction de la moyenne des notes de chaque √©tudiant
  return arr.sort((a, b) => {
    // Calcule la moyenne des notes de l'√©tudiant b et soustrait la moyenne des notes de l'√©tudiant a
    return (
      b.grades.reduce((acc, cur) => acc + cur) / arr[0].grades.length -
      a.grades.reduce((acc, cur) => acc + cur) / arr[0].grades.length
    );
  });
}

/* .sort() */
// > 0 a apr√®s b
// < 0 a avant b
// === 0 garder l'ordre

// (a,b) => a - b // ordre croissant

// [10,5,15]
// 10 - 5 = 5     a passe apr√®s b
// [5,10,15]
// 10 - 15 = -5   a reste avant b

// (a,b) => b - a // ordre d√©croissant

// [10,5,15]
// 5 - 10 = -5    a reste avant b
// [10,5,15]
// 15 - 5 = 10    a apr√®s b
// [10,15,5]
// 15 - 10 = 5    a apr√®s b
// [15,10,5]

/* √âNONC√â üìö */

/*  
  Vous recevez un tableau rempli d'objets repr√©sentant les √©l√®ves d'une classe et leurs notes.
  Retournez un tableau dont les objets pr√©c√©dents ont √©t√© tri√©s par ordre d√©croissant en fonction de la moyenne de chaque √©l√®ve.
*/

/* Test √† passer üß™ */

console.log(
  sortedStudents([
    { name: "Tom", grades: [1, 3, 5, 9, 2, 7] },
    { name: "Jack", grades: [20, 4, 18, 10, 14, 12] },
    { name: "Ana", grades: [11, 14, 3, 14, 12, 14] },
    { name: "Sara", grades: [10, 12, 14, 15, 14, 19] },
  ])
);

/* Returns */

/* 
[
  { name: 'Sara', grades: [ 10, 12, 14, 15, 14, 19 ] },
  { name: 'Jack', grades: [ 20, 4, 18, 10, 14, 12 ] },
  { name: 'Ana', grades: [ 11, 14, 3, 14, 12, 14 ] },
  { name: 'Tom', grades: [ 1, 3, 5, 9, 2, 7 ] }
]
*/

/*Explications
console.log(...) :
Affiche dans la console la moyenne des notes du premier √©tudiant dans le tableau arr. 
Cela donne un aper√ßu de la moyenne des notes avant le tri du tableau.

arr[0].grades.reduce((acc, cur) => acc + cur) / arr[0].grades.length :
Calcule la moyenne des notes du premier √©tudiant dans le tableau arr. 
La m√©thode reduce est utilis√©e pour additionner toutes les notes de l'√©tudiant, 
puis le r√©sultat est divis√© par la longueur du tableau grades de l'√©tudiant.

arr.sort((a, b) => { ... }) :
Utilise la m√©thode sort() pour trier le tableau d'objets arr en fonction d'une fonction de comparaison fournie en argument.
La fonction de comparaison prend deux arguments, a et b, qui repr√©sentent deux objets du tableau.

b.grades.reduce((acc, cur) => acc + cur) / arr[0].grades.length - a.grades.reduce((acc, cur) => acc + cur) / arr[0].grades.length :
Calcule la diff√©rence entre les moyennes des notes de l'√©tudiant b et de l'√©tudiant a.
La fonction de comparaison utilise la m√™me logique que pr√©c√©demment, 
o√π les moyennes des notes sont calcul√©es en utilisant reduce et en divisant par la longueur du tableau grades du premier √©tudiant dans arr. 

la fonction sortedStudents affiche la moyenne des notes du premier √©tudiant dans le tableau, 
puis trie le tableau d'objets repr√©sentant des √©tudiants en fonction de la moyenne de leurs notes, 
du plus √©lev√© au plus bas. La m√©thode sort est utilis√©e avec une fonction de comparaison personnalis√©e bas√©e sur la moyenne des notes de chaque √©tudiant. */
